# Generated by Django 3.0.5 on 2020-04-08 01:20

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Participant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.TextField(blank=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CovidCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nation_total', models.PositiveIntegerField()),
                ('nation_deaths', models.PositiveIntegerField()),
                ('tx_total', models.PositiveIntegerField()),
                ('tx_deaths', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='UserPatientRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_id', models.CharField(max_length=8, validators=[django.core.validators.RegexValidator('^[1-9a-z]+$', message='This field can only contain characters 1-9 and a-z.')])),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TrackRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_update', models.DateTimeField(auto_now=True)),
                ('track_date', models.DateField()),
                ('cost_category', models.CharField(max_length=100)),
                ('cost', models.FloatField()),
                ('people_interacted', models.PositiveIntegerField()),
                ('screen_time', models.PositiveIntegerField()),
                ('mood', models.CharField(max_length=20)),
                ('weight', models.FloatField()),
                ('fever', models.FloatField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study_name', models.TextField()),
                ('begin_timestamp', models.BigIntegerField()),
                ('end_timestamp', models.BigIntegerField()),
                ('survey_id', models.CharField(max_length=8)),
                ('num_scheduled', models.PositiveIntegerField()),
                ('num_completed', models.PositiveIntegerField()),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='txcovid.UserPatientRelation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ScreenTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study_name', models.TextField()),
                ('begin_timestamp', models.BigIntegerField()),
                ('end_timestamp', models.BigIntegerField()),
                ('duration_screen_unlocked', models.PositiveIntegerField()),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='txcovid.UserPatientRelation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Reachability',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study_name', models.TextField()),
                ('begin_timestamp', models.BigIntegerField()),
                ('end_timestamp', models.BigIntegerField()),
                ('duration_wifi', models.PositiveIntegerField()),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='txcovid.UserPatientRelation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Proximity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study_name', models.TextField()),
                ('begin_timestamp', models.BigIntegerField()),
                ('end_timestamp', models.BigIntegerField()),
                ('duration_on_phone', models.PositiveIntegerField()),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='txcovid.UserPatientRelation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Identifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study_name', models.TextField()),
                ('begin_timestamp', models.BigIntegerField()),
                ('end_timestamp', models.BigIntegerField()),
                ('phone_version', models.TextField()),
                ('phone_model', models.TextField()),
                ('phone_manufacturer', models.TextField()),
                ('operating_system', models.TextField()),
                ('operating_system_version', models.TextField()),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='txcovid.UserPatientRelation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GPS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study_name', models.TextField()),
                ('begin_timestamp', models.BigIntegerField()),
                ('end_timestamp', models.BigIntegerField()),
                ('number_locations_visited', models.PositiveIntegerField()),
                ('travel_radius_miles_mean', models.FloatField()),
                ('travel_radius_miles_sum_product', models.FloatField()),
                ('travel_radius_miles_sum_squares', models.FloatField()),
                ('path_length_miles', models.PositiveIntegerField()),
                ('num_data_points', models.PositiveIntegerField()),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='txcovid.UserPatientRelation')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Accelerometer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('study_name', models.TextField()),
                ('begin_timestamp', models.BigIntegerField()),
                ('end_timestamp', models.BigIntegerField()),
                ('duration_phone_on_person', models.PositiveIntegerField()),
                ('duration_sedentary', models.PositiveIntegerField()),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='txcovid.UserPatientRelation')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
